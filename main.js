/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MarkdownSourceViewPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var MarkdownSourceViewPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.sourceViewPaths = [];
  }
  async onload() {
    await this.loadSettings();
    this.registerEvent(this.app.workspace.on("file-menu", (menu, file) => {
      if (file instanceof import_obsidian.TFile && file.extension === "md") {
        const isSourceView = this.sourceViewPaths.includes(file.path);
        menu.addItem((item) => {
          item.setTitle(isSourceView ? "Disable default source view" : "Enable default source view").setIcon(isSourceView ? "code-off" : "code").onClick(() => this.toggleSourceViewMode(file));
        });
      }
    }));
    this.registerEvent(this.app.workspace.on("file-open", (file) => {
      setImmediate(() => {
        console.log("file-open", file, file ? this.sourceViewPaths.includes(file.path) : false);
        const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (view && file && this.sourceViewPaths.includes(file.path)) {
          view.editMode.sourceMode = true;
        } else {
          view.editMode.sourceMode = false;
        }
      });
    }));
    this.addCommand({
      id: "toggle-source-view-mode",
      name: "Toggle default source view mode for current file",
      checkCallback: (checking) => {
        const file = this.app.workspace.getActiveFile();
        if (file && file.extension === "md") {
          if (!checking) {
            this.toggleSourceViewMode(file);
          }
          return true;
        }
        return false;
      }
    });
  }
  async loadSettings() {
    const data = await this.loadData();
    this.sourceViewPaths = (data == null ? void 0 : data.sourceViewPaths) || [];
  }
  async saveSettings() {
    await this.saveData({ sourceViewPaths: this.sourceViewPaths });
  }
  async toggleSourceViewMode(file) {
    const isSourceView = this.sourceViewPaths.includes(file.path);
    if (isSourceView) {
      this.sourceViewPaths = this.sourceViewPaths.filter((path) => path !== file.path);
      new import_obsidian.Notice(`Default source view disabled for ${file.name}`);
    } else {
      this.sourceViewPaths.push(file.path);
      new import_obsidian.Notice(`Default source view enabled for ${file.name}`);
    }
    await this.saveSettings();
    const markdownLeaves = this.app.workspace.getLeavesOfType("markdown");
    console.log("markdownLeaves", markdownLeaves);
    markdownLeaves.forEach((leaf) => {
      if (leaf.view instanceof import_obsidian.MarkdownView && leaf.view.file === file) {
        console.log("leaf", leaf.view.leaf, leaf.view.editMode.sourceMode);
        const viewState = leaf.view.leaf.getViewState();
        console.log("viewState", viewState);
        viewState.state.mode = "source";
        viewState.state.source = !isSourceView;
        leaf.view.leaf.setViewState(viewState);
        console.log("viewState", leaf.view.leaf);
      }
    });
  }
};
